     0  *ast.File {
     1  .  Package: 2:1
     2  .  Name: *ast.Ident {
     3  .  .  NamePos: 2:9
     4  .  .  Name: "main"
     5  .  }
     6  .  Decls: []ast.Decl (len = 1) {
     7  .  .  0: *ast.FuncDecl {
     8  .  .  .  Name: *ast.Ident {
     9  .  .  .  .  NamePos: 6:6
    10  .  .  .  .  Name: "main"
    11  .  .  .  }
    12  .  .  .  Type: *ast.FuncType {
    13  .  .  .  .  Func: 6:1
    14  .  .  .  .  Params: *ast.FieldList {
    15  .  .  .  .  .  Opening: 6:10
    16  .  .  .  .  .  Closing: 6:11
    17  .  .  .  .  }
    18  .  .  .  }
    19  .  .  .  Body: *ast.BlockStmt {
    20  .  .  .  .  Lbrace: 6:13
    21  .  .  .  .  List: []ast.Stmt (len = 6) {
    22  .  .  .  .  .  0: *ast.ExprStmt {
    23  .  .  .  .  .  .  X: *ast.CallExpr {
    24  .  .  .  .  .  .  .  Fun: *ast.Ident {
    25  .  .  .  .  .  .  .  .  NamePos: 8:2
    26  .  .  .  .  .  .  .  .  Name: "println"
    27  .  .  .  .  .  .  .  }
    28  .  .  .  .  .  .  .  Lparen: 8:9
    29  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
    30  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
    31  .  .  .  .  .  .  .  .  .  ValuePos: 8:10
    32  .  .  .  .  .  .  .  .  .  Kind: STRING
    33  .  .  .  .  .  .  .  .  .  Value: "\"1>0||2>1\""
    34  .  .  .  .  .  .  .  .  }
    35  .  .  .  .  .  .  .  }
    36  .  .  .  .  .  .  .  Ellipsis: -
    37  .  .  .  .  .  .  .  Rparen: 8:20
    38  .  .  .  .  .  .  }
    39  .  .  .  .  .  }
    40  .  .  .  .  .  1: *ast.ExprStmt {
    41  .  .  .  .  .  .  X: *ast.CallExpr {
    42  .  .  .  .  .  .  .  Fun: *ast.Ident {
    43  .  .  .  .  .  .  .  .  NamePos: 9:2
    44  .  .  .  .  .  .  .  .  Name: "println"
    45  .  .  .  .  .  .  .  }
    46  .  .  .  .  .  .  .  Lparen: 9:9
    47  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
    48  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
    49  .  .  .  .  .  .  .  .  .  X: *ast.BinaryExpr {
    50  .  .  .  .  .  .  .  .  .  .  X: *ast.BasicLit {
    51  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 9:10
    52  .  .  .  .  .  .  .  .  .  .  .  Kind: INT
    53  .  .  .  .  .  .  .  .  .  .  .  Value: "1"
    54  .  .  .  .  .  .  .  .  .  .  }
    55  .  .  .  .  .  .  .  .  .  .  OpPos: 9:11
    56  .  .  .  .  .  .  .  .  .  .  Op: >
    57  .  .  .  .  .  .  .  .  .  .  Y: *ast.BasicLit {
    58  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 9:12
    59  .  .  .  .  .  .  .  .  .  .  .  Kind: INT
    60  .  .  .  .  .  .  .  .  .  .  .  Value: "0"
    61  .  .  .  .  .  .  .  .  .  .  }
    62  .  .  .  .  .  .  .  .  .  }
    63  .  .  .  .  .  .  .  .  .  OpPos: 9:13
    64  .  .  .  .  .  .  .  .  .  Op: ||
    65  .  .  .  .  .  .  .  .  .  Y: *ast.BinaryExpr {
    66  .  .  .  .  .  .  .  .  .  .  X: *ast.BasicLit {
    67  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 9:15
    68  .  .  .  .  .  .  .  .  .  .  .  Kind: INT
    69  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
    70  .  .  .  .  .  .  .  .  .  .  }
    71  .  .  .  .  .  .  .  .  .  .  OpPos: 9:16
    72  .  .  .  .  .  .  .  .  .  .  Op: >
    73  .  .  .  .  .  .  .  .  .  .  Y: *ast.BasicLit {
    74  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 9:17
    75  .  .  .  .  .  .  .  .  .  .  .  Kind: INT
    76  .  .  .  .  .  .  .  .  .  .  .  Value: "1"
    77  .  .  .  .  .  .  .  .  .  .  }
    78  .  .  .  .  .  .  .  .  .  }
    79  .  .  .  .  .  .  .  .  }
    80  .  .  .  .  .  .  .  }
    81  .  .  .  .  .  .  .  Ellipsis: -
    82  .  .  .  .  .  .  .  Rparen: 9:18
    83  .  .  .  .  .  .  }
    84  .  .  .  .  .  }
    85  .  .  .  .  .  2: *ast.ExprStmt {
    86  .  .  .  .  .  .  X: *ast.CallExpr {
    87  .  .  .  .  .  .  .  Fun: *ast.Ident {
    88  .  .  .  .  .  .  .  .  NamePos: 10:2
    89  .  .  .  .  .  .  .  .  Name: "println"
    90  .  .  .  .  .  .  .  }
    91  .  .  .  .  .  .  .  Lparen: 10:9
    92  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
    93  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
    94  .  .  .  .  .  .  .  .  .  ValuePos: 10:10
    95  .  .  .  .  .  .  .  .  .  Kind: STRING
    96  .  .  .  .  .  .  .  .  .  Value: "\"0>0||2>1\""
    97  .  .  .  .  .  .  .  .  }
    98  .  .  .  .  .  .  .  }
    99  .  .  .  .  .  .  .  Ellipsis: -
   100  .  .  .  .  .  .  .  Rparen: 10:20
   101  .  .  .  .  .  .  }
   102  .  .  .  .  .  }
   103  .  .  .  .  .  3: *ast.ExprStmt {
   104  .  .  .  .  .  .  X: *ast.CallExpr {
   105  .  .  .  .  .  .  .  Fun: *ast.Ident {
   106  .  .  .  .  .  .  .  .  NamePos: 11:2
   107  .  .  .  .  .  .  .  .  Name: "println"
   108  .  .  .  .  .  .  .  }
   109  .  .  .  .  .  .  .  Lparen: 11:9
   110  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   111  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
   112  .  .  .  .  .  .  .  .  .  X: *ast.BinaryExpr {
   113  .  .  .  .  .  .  .  .  .  .  X: *ast.BasicLit {
   114  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 11:10
   115  .  .  .  .  .  .  .  .  .  .  .  Kind: INT
   116  .  .  .  .  .  .  .  .  .  .  .  Value: "0"
   117  .  .  .  .  .  .  .  .  .  .  }
   118  .  .  .  .  .  .  .  .  .  .  OpPos: 11:11
   119  .  .  .  .  .  .  .  .  .  .  Op: >
   120  .  .  .  .  .  .  .  .  .  .  Y: *ast.BasicLit {
   121  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 11:12
   122  .  .  .  .  .  .  .  .  .  .  .  Kind: INT
   123  .  .  .  .  .  .  .  .  .  .  .  Value: "0"
   124  .  .  .  .  .  .  .  .  .  .  }
   125  .  .  .  .  .  .  .  .  .  }
   126  .  .  .  .  .  .  .  .  .  OpPos: 11:13
   127  .  .  .  .  .  .  .  .  .  Op: ||
   128  .  .  .  .  .  .  .  .  .  Y: *ast.BinaryExpr {
   129  .  .  .  .  .  .  .  .  .  .  X: *ast.BasicLit {
   130  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 11:15
   131  .  .  .  .  .  .  .  .  .  .  .  Kind: INT
   132  .  .  .  .  .  .  .  .  .  .  .  Value: "2"
   133  .  .  .  .  .  .  .  .  .  .  }
   134  .  .  .  .  .  .  .  .  .  .  OpPos: 11:16
   135  .  .  .  .  .  .  .  .  .  .  Op: >
   136  .  .  .  .  .  .  .  .  .  .  Y: *ast.BasicLit {
   137  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 11:17
   138  .  .  .  .  .  .  .  .  .  .  .  Kind: INT
   139  .  .  .  .  .  .  .  .  .  .  .  Value: "1"
   140  .  .  .  .  .  .  .  .  .  .  }
   141  .  .  .  .  .  .  .  .  .  }
   142  .  .  .  .  .  .  .  .  }
   143  .  .  .  .  .  .  .  }
   144  .  .  .  .  .  .  .  Ellipsis: -
   145  .  .  .  .  .  .  .  Rparen: 11:18
   146  .  .  .  .  .  .  }
   147  .  .  .  .  .  }
   148  .  .  .  .  .  4: *ast.ExprStmt {
   149  .  .  .  .  .  .  X: *ast.CallExpr {
   150  .  .  .  .  .  .  .  Fun: *ast.Ident {
   151  .  .  .  .  .  .  .  .  NamePos: 12:2
   152  .  .  .  .  .  .  .  .  Name: "println"
   153  .  .  .  .  .  .  .  }
   154  .  .  .  .  .  .  .  Lparen: 12:9
   155  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   156  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   157  .  .  .  .  .  .  .  .  .  ValuePos: 12:10
   158  .  .  .  .  .  .  .  .  .  Kind: STRING
   159  .  .  .  .  .  .  .  .  .  Value: "\"0>0||0>1\""
   160  .  .  .  .  .  .  .  .  }
   161  .  .  .  .  .  .  .  }
   162  .  .  .  .  .  .  .  Ellipsis: -
   163  .  .  .  .  .  .  .  Rparen: 12:20
   164  .  .  .  .  .  .  }
   165  .  .  .  .  .  }
   166  .  .  .  .  .  5: *ast.ExprStmt {
   167  .  .  .  .  .  .  X: *ast.CallExpr {
   168  .  .  .  .  .  .  .  Fun: *ast.Ident {
   169  .  .  .  .  .  .  .  .  NamePos: 13:2
   170  .  .  .  .  .  .  .  .  Name: "println"
   171  .  .  .  .  .  .  .  }
   172  .  .  .  .  .  .  .  Lparen: 13:9
   173  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   174  .  .  .  .  .  .  .  .  0: *ast.BinaryExpr {
   175  .  .  .  .  .  .  .  .  .  X: *ast.BinaryExpr {
   176  .  .  .  .  .  .  .  .  .  .  X: *ast.BasicLit {
   177  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 13:10
   178  .  .  .  .  .  .  .  .  .  .  .  Kind: INT
   179  .  .  .  .  .  .  .  .  .  .  .  Value: "0"
   180  .  .  .  .  .  .  .  .  .  .  }
   181  .  .  .  .  .  .  .  .  .  .  OpPos: 13:11
   182  .  .  .  .  .  .  .  .  .  .  Op: >
   183  .  .  .  .  .  .  .  .  .  .  Y: *ast.BasicLit {
   184  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 13:12
   185  .  .  .  .  .  .  .  .  .  .  .  Kind: INT
   186  .  .  .  .  .  .  .  .  .  .  .  Value: "0"
   187  .  .  .  .  .  .  .  .  .  .  }
   188  .  .  .  .  .  .  .  .  .  }
   189  .  .  .  .  .  .  .  .  .  OpPos: 13:13
   190  .  .  .  .  .  .  .  .  .  Op: ||
   191  .  .  .  .  .  .  .  .  .  Y: *ast.BinaryExpr {
   192  .  .  .  .  .  .  .  .  .  .  X: *ast.BasicLit {
   193  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 13:15
   194  .  .  .  .  .  .  .  .  .  .  .  Kind: INT
   195  .  .  .  .  .  .  .  .  .  .  .  Value: "0"
   196  .  .  .  .  .  .  .  .  .  .  }
   197  .  .  .  .  .  .  .  .  .  .  OpPos: 13:16
   198  .  .  .  .  .  .  .  .  .  .  Op: >
   199  .  .  .  .  .  .  .  .  .  .  Y: *ast.BasicLit {
   200  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 13:17
   201  .  .  .  .  .  .  .  .  .  .  .  Kind: INT
   202  .  .  .  .  .  .  .  .  .  .  .  Value: "1"
   203  .  .  .  .  .  .  .  .  .  .  }
   204  .  .  .  .  .  .  .  .  .  }
   205  .  .  .  .  .  .  .  .  }
   206  .  .  .  .  .  .  .  }
   207  .  .  .  .  .  .  .  Ellipsis: -
   208  .  .  .  .  .  .  .  Rparen: 13:18
   209  .  .  .  .  .  .  }
   210  .  .  .  .  .  }
   211  .  .  .  .  }
   212  .  .  .  .  Rbrace: 15:1
   213  .  .  .  }
   214  .  .  }
   215  .  }
   216  .  Scope: *ast.Scope {
   217  .  .  Objects: map[string]*ast.Object (len = 1) {
   218  .  .  .  "main": *ast.Object {
   219  .  .  .  .  Kind: func
   220  .  .  .  .  Name: "main"
   221  .  .  .  .  Decl: *(obj @ 7)
   222  .  .  .  }
   223  .  .  }
   224  .  }
   225  .  Unresolved: []*ast.Ident (len = 6) {
   226  .  .  0: *(obj @ 24)
   227  .  .  1: *(obj @ 42)
   228  .  .  2: *(obj @ 87)
   229  .  .  3: *(obj @ 105)
   230  .  .  4: *(obj @ 150)
   231  .  .  5: *(obj @ 168)
   232  .  }
   233  }
