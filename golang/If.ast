     0  *ast.File {
     1  .  Package: 1:1
     2  .  Name: *ast.Ident {
     3  .  .  NamePos: 1:9
     4  .  .  Name: "main"
     5  .  }
     6  .  Decls: []ast.Decl (len = 1) {
     7  .  .  0: *ast.FuncDecl {
     8  .  .  .  Name: *ast.Ident {
     9  .  .  .  .  NamePos: 3:6
    10  .  .  .  .  Name: "main"
    11  .  .  .  .  Obj: *ast.Object {
    12  .  .  .  .  .  Kind: func
    13  .  .  .  .  .  Name: "main"
    14  .  .  .  .  .  Decl: *(obj @ 7)
    15  .  .  .  .  }
    16  .  .  .  }
    17  .  .  .  Type: *ast.FuncType {
    18  .  .  .  .  Func: 3:1
    19  .  .  .  .  Params: *ast.FieldList {
    20  .  .  .  .  .  Opening: 3:10
    21  .  .  .  .  .  Closing: 3:11
    22  .  .  .  .  }
    23  .  .  .  }
    24  .  .  .  Body: *ast.BlockStmt {
    25  .  .  .  .  Lbrace: 3:13
    26  .  .  .  .  List: []ast.Stmt (len = 10) {
    27  .  .  .  .  .  0: *ast.ExprStmt {
    28  .  .  .  .  .  .  X: *ast.CallExpr {
    29  .  .  .  .  .  .  .  Fun: *ast.Ident {
    30  .  .  .  .  .  .  .  .  NamePos: 4:9
    31  .  .  .  .  .  .  .  .  Name: "println"
    32  .  .  .  .  .  .  .  }
    33  .  .  .  .  .  .  .  Lparen: 4:16
    34  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
    35  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
    36  .  .  .  .  .  .  .  .  .  ValuePos: 4:17
    37  .  .  .  .  .  .  .  .  .  Kind: STRING
    38  .  .  .  .  .  .  .  .  .  Value: "\"if 7%2 ==0\""
    39  .  .  .  .  .  .  .  .  }
    40  .  .  .  .  .  .  .  }
    41  .  .  .  .  .  .  .  Ellipsis: -
    42  .  .  .  .  .  .  .  Rparen: 4:29
    43  .  .  .  .  .  .  }
    44  .  .  .  .  .  }
    45  .  .  .  .  .  1: *ast.IfStmt {
    46  .  .  .  .  .  .  If: 5:2
    47  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
    48  .  .  .  .  .  .  .  X: *ast.BinaryExpr {
    49  .  .  .  .  .  .  .  .  X: *ast.BasicLit {
    50  .  .  .  .  .  .  .  .  .  ValuePos: 5:5
    51  .  .  .  .  .  .  .  .  .  Kind: INT
    52  .  .  .  .  .  .  .  .  .  Value: "7"
    53  .  .  .  .  .  .  .  .  }
    54  .  .  .  .  .  .  .  .  OpPos: 5:6
    55  .  .  .  .  .  .  .  .  Op: %
    56  .  .  .  .  .  .  .  .  Y: *ast.BasicLit {
    57  .  .  .  .  .  .  .  .  .  ValuePos: 5:7
    58  .  .  .  .  .  .  .  .  .  Kind: INT
    59  .  .  .  .  .  .  .  .  .  Value: "2"
    60  .  .  .  .  .  .  .  .  }
    61  .  .  .  .  .  .  .  }
    62  .  .  .  .  .  .  .  OpPos: 5:9
    63  .  .  .  .  .  .  .  Op: ==
    64  .  .  .  .  .  .  .  Y: *ast.BasicLit {
    65  .  .  .  .  .  .  .  .  ValuePos: 5:12
    66  .  .  .  .  .  .  .  .  Kind: INT
    67  .  .  .  .  .  .  .  .  Value: "0"
    68  .  .  .  .  .  .  .  }
    69  .  .  .  .  .  .  }
    70  .  .  .  .  .  .  Body: *ast.BlockStmt {
    71  .  .  .  .  .  .  .  Lbrace: 5:14
    72  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
    73  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
    74  .  .  .  .  .  .  .  .  .  X: *ast.CallExpr {
    75  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
    76  .  .  .  .  .  .  .  .  .  .  .  NamePos: 6:13
    77  .  .  .  .  .  .  .  .  .  .  .  Name: "println"
    78  .  .  .  .  .  .  .  .  .  .  }
    79  .  .  .  .  .  .  .  .  .  .  Lparen: 6:20
    80  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
    81  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
    82  .  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 6:21
    83  .  .  .  .  .  .  .  .  .  .  .  .  Kind: STRING
    84  .  .  .  .  .  .  .  .  .  .  .  .  Value: "\"7 is even\""
    85  .  .  .  .  .  .  .  .  .  .  .  }
    86  .  .  .  .  .  .  .  .  .  .  }
    87  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
    88  .  .  .  .  .  .  .  .  .  .  Rparen: 6:32
    89  .  .  .  .  .  .  .  .  .  }
    90  .  .  .  .  .  .  .  .  }
    91  .  .  .  .  .  .  .  }
    92  .  .  .  .  .  .  .  Rbrace: 7:9
    93  .  .  .  .  .  .  }
    94  .  .  .  .  .  .  Else: *ast.BlockStmt {
    95  .  .  .  .  .  .  .  Lbrace: 7:16
    96  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
    97  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
    98  .  .  .  .  .  .  .  .  .  X: *ast.CallExpr {
    99  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
   100  .  .  .  .  .  .  .  .  .  .  .  NamePos: 8:13
   101  .  .  .  .  .  .  .  .  .  .  .  Name: "println"
   102  .  .  .  .  .  .  .  .  .  .  }
   103  .  .  .  .  .  .  .  .  .  .  Lparen: 8:20
   104  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   105  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   106  .  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 8:21
   107  .  .  .  .  .  .  .  .  .  .  .  .  Kind: STRING
   108  .  .  .  .  .  .  .  .  .  .  .  .  Value: "\"7 is odd\""
   109  .  .  .  .  .  .  .  .  .  .  .  }
   110  .  .  .  .  .  .  .  .  .  .  }
   111  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
   112  .  .  .  .  .  .  .  .  .  .  Rparen: 8:31
   113  .  .  .  .  .  .  .  .  .  }
   114  .  .  .  .  .  .  .  .  }
   115  .  .  .  .  .  .  .  }
   116  .  .  .  .  .  .  .  Rbrace: 9:9
   117  .  .  .  .  .  .  }
   118  .  .  .  .  .  }
   119  .  .  .  .  .  2: *ast.ExprStmt {
   120  .  .  .  .  .  .  X: *ast.CallExpr {
   121  .  .  .  .  .  .  .  Fun: *ast.Ident {
   122  .  .  .  .  .  .  .  .  NamePos: 11:9
   123  .  .  .  .  .  .  .  .  Name: "println"
   124  .  .  .  .  .  .  .  }
   125  .  .  .  .  .  .  .  Lparen: 11:16
   126  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   127  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   128  .  .  .  .  .  .  .  .  .  ValuePos: 11:17
   129  .  .  .  .  .  .  .  .  .  Kind: STRING
   130  .  .  .  .  .  .  .  .  .  Value: "\"if 8%4 ==0\""
   131  .  .  .  .  .  .  .  .  }
   132  .  .  .  .  .  .  .  }
   133  .  .  .  .  .  .  .  Ellipsis: -
   134  .  .  .  .  .  .  .  Rparen: 11:29
   135  .  .  .  .  .  .  }
   136  .  .  .  .  .  }
   137  .  .  .  .  .  3: *ast.IfStmt {
   138  .  .  .  .  .  .  If: 12:9
   139  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   140  .  .  .  .  .  .  .  X: *ast.BinaryExpr {
   141  .  .  .  .  .  .  .  .  X: *ast.BasicLit {
   142  .  .  .  .  .  .  .  .  .  ValuePos: 12:12
   143  .  .  .  .  .  .  .  .  .  Kind: INT
   144  .  .  .  .  .  .  .  .  .  Value: "8"
   145  .  .  .  .  .  .  .  .  }
   146  .  .  .  .  .  .  .  .  OpPos: 12:13
   147  .  .  .  .  .  .  .  .  Op: %
   148  .  .  .  .  .  .  .  .  Y: *ast.BasicLit {
   149  .  .  .  .  .  .  .  .  .  ValuePos: 12:14
   150  .  .  .  .  .  .  .  .  .  Kind: INT
   151  .  .  .  .  .  .  .  .  .  Value: "4"
   152  .  .  .  .  .  .  .  .  }
   153  .  .  .  .  .  .  .  }
   154  .  .  .  .  .  .  .  OpPos: 12:16
   155  .  .  .  .  .  .  .  Op: ==
   156  .  .  .  .  .  .  .  Y: *ast.BasicLit {
   157  .  .  .  .  .  .  .  .  ValuePos: 12:19
   158  .  .  .  .  .  .  .  .  Kind: INT
   159  .  .  .  .  .  .  .  .  Value: "0"
   160  .  .  .  .  .  .  .  }
   161  .  .  .  .  .  .  }
   162  .  .  .  .  .  .  Body: *ast.BlockStmt {
   163  .  .  .  .  .  .  .  Lbrace: 12:21
   164  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   165  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   166  .  .  .  .  .  .  .  .  .  X: *ast.CallExpr {
   167  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
   168  .  .  .  .  .  .  .  .  .  .  .  NamePos: 13:13
   169  .  .  .  .  .  .  .  .  .  .  .  Name: "println"
   170  .  .  .  .  .  .  .  .  .  .  }
   171  .  .  .  .  .  .  .  .  .  .  Lparen: 13:20
   172  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   173  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   174  .  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 13:21
   175  .  .  .  .  .  .  .  .  .  .  .  .  Kind: STRING
   176  .  .  .  .  .  .  .  .  .  .  .  .  Value: "\"8 is divisible by 4\""
   177  .  .  .  .  .  .  .  .  .  .  .  }
   178  .  .  .  .  .  .  .  .  .  .  }
   179  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
   180  .  .  .  .  .  .  .  .  .  .  Rparen: 13:42
   181  .  .  .  .  .  .  .  .  .  }
   182  .  .  .  .  .  .  .  .  }
   183  .  .  .  .  .  .  .  }
   184  .  .  .  .  .  .  .  Rbrace: 14:9
   185  .  .  .  .  .  .  }
   186  .  .  .  .  .  }
   187  .  .  .  .  .  4: *ast.ExprStmt {
   188  .  .  .  .  .  .  X: *ast.CallExpr {
   189  .  .  .  .  .  .  .  Fun: *ast.Ident {
   190  .  .  .  .  .  .  .  .  NamePos: 16:7
   191  .  .  .  .  .  .  .  .  Name: "println"
   192  .  .  .  .  .  .  .  }
   193  .  .  .  .  .  .  .  Lparen: 16:14
   194  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   195  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   196  .  .  .  .  .  .  .  .  .  ValuePos: 16:15
   197  .  .  .  .  .  .  .  .  .  Kind: STRING
   198  .  .  .  .  .  .  .  .  .  Value: "\"if 2 / 1 == 0\""
   199  .  .  .  .  .  .  .  .  }
   200  .  .  .  .  .  .  .  }
   201  .  .  .  .  .  .  .  Ellipsis: -
   202  .  .  .  .  .  .  .  Rparen: 16:30
   203  .  .  .  .  .  .  }
   204  .  .  .  .  .  }
   205  .  .  .  .  .  5: *ast.ExprStmt {
   206  .  .  .  .  .  .  X: *ast.CallExpr {
   207  .  .  .  .  .  .  .  Fun: *ast.Ident {
   208  .  .  .  .  .  .  .  .  NamePos: 17:7
   209  .  .  .  .  .  .  .  .  Name: "println"
   210  .  .  .  .  .  .  .  }
   211  .  .  .  .  .  .  .  Lparen: 17:14
   212  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   213  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   214  .  .  .  .  .  .  .  .  .  ValuePos: 17:15
   215  .  .  .  .  .  .  .  .  .  Kind: STRING
   216  .  .  .  .  .  .  .  .  .  Value: "\"else if 1 + 2 == 4\""
   217  .  .  .  .  .  .  .  .  }
   218  .  .  .  .  .  .  .  }
   219  .  .  .  .  .  .  .  Ellipsis: -
   220  .  .  .  .  .  .  .  Rparen: 17:35
   221  .  .  .  .  .  .  }
   222  .  .  .  .  .  }
   223  .  .  .  .  .  6: *ast.IfStmt {
   224  .  .  .  .  .  .  If: 18:7
   225  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   226  .  .  .  .  .  .  .  X: *ast.BinaryExpr {
   227  .  .  .  .  .  .  .  .  X: *ast.BasicLit {
   228  .  .  .  .  .  .  .  .  .  ValuePos: 18:10
   229  .  .  .  .  .  .  .  .  .  Kind: INT
   230  .  .  .  .  .  .  .  .  .  Value: "2"
   231  .  .  .  .  .  .  .  .  }
   232  .  .  .  .  .  .  .  .  OpPos: 18:12
   233  .  .  .  .  .  .  .  .  Op: /
   234  .  .  .  .  .  .  .  .  Y: *ast.BasicLit {
   235  .  .  .  .  .  .  .  .  .  ValuePos: 18:14
   236  .  .  .  .  .  .  .  .  .  Kind: INT
   237  .  .  .  .  .  .  .  .  .  Value: "1"
   238  .  .  .  .  .  .  .  .  }
   239  .  .  .  .  .  .  .  }
   240  .  .  .  .  .  .  .  OpPos: 18:16
   241  .  .  .  .  .  .  .  Op: ==
   242  .  .  .  .  .  .  .  Y: *ast.BasicLit {
   243  .  .  .  .  .  .  .  .  ValuePos: 18:19
   244  .  .  .  .  .  .  .  .  Kind: INT
   245  .  .  .  .  .  .  .  .  Value: "0"
   246  .  .  .  .  .  .  .  }
   247  .  .  .  .  .  .  }
   248  .  .  .  .  .  .  Body: *ast.BlockStmt {
   249  .  .  .  .  .  .  .  Lbrace: 18:21
   250  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   251  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   252  .  .  .  .  .  .  .  .  .  X: *ast.CallExpr {
   253  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
   254  .  .  .  .  .  .  .  .  .  .  .  NamePos: 19:12
   255  .  .  .  .  .  .  .  .  .  .  .  Name: "println"
   256  .  .  .  .  .  .  .  .  .  .  }
   257  .  .  .  .  .  .  .  .  .  .  Lparen: 19:19
   258  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   259  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   260  .  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 19:20
   261  .  .  .  .  .  .  .  .  .  .  .  .  Kind: STRING
   262  .  .  .  .  .  .  .  .  .  .  .  .  Value: "\"never will happen\""
   263  .  .  .  .  .  .  .  .  .  .  .  }
   264  .  .  .  .  .  .  .  .  .  .  }
   265  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
   266  .  .  .  .  .  .  .  .  .  .  Rparen: 19:39
   267  .  .  .  .  .  .  .  .  .  }
   268  .  .  .  .  .  .  .  .  }
   269  .  .  .  .  .  .  .  }
   270  .  .  .  .  .  .  .  Rbrace: 20:7
   271  .  .  .  .  .  .  }
   272  .  .  .  .  .  }
   273  .  .  .  .  .  7: *ast.BadStmt {
   274  .  .  .  .  .  .  From: 21:7
   275  .  .  .  .  .  .  To: 21:12
   276  .  .  .  .  .  }
   277  .  .  .  .  .  8: *ast.IfStmt {
   278  .  .  .  .  .  .  If: 21:12
   279  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   280  .  .  .  .  .  .  .  X: *ast.BinaryExpr {
   281  .  .  .  .  .  .  .  .  X: *ast.BasicLit {
   282  .  .  .  .  .  .  .  .  .  ValuePos: 21:15
   283  .  .  .  .  .  .  .  .  .  Kind: INT
   284  .  .  .  .  .  .  .  .  .  Value: "1"
   285  .  .  .  .  .  .  .  .  }
   286  .  .  .  .  .  .  .  .  OpPos: 21:17
   287  .  .  .  .  .  .  .  .  Op: +
   288  .  .  .  .  .  .  .  .  Y: *ast.BasicLit {
   289  .  .  .  .  .  .  .  .  .  ValuePos: 21:19
   290  .  .  .  .  .  .  .  .  .  Kind: INT
   291  .  .  .  .  .  .  .  .  .  Value: "2"
   292  .  .  .  .  .  .  .  .  }
   293  .  .  .  .  .  .  .  }
   294  .  .  .  .  .  .  .  OpPos: 21:21
   295  .  .  .  .  .  .  .  Op: ==
   296  .  .  .  .  .  .  .  Y: *ast.BasicLit {
   297  .  .  .  .  .  .  .  .  ValuePos: 21:24
   298  .  .  .  .  .  .  .  .  Kind: INT
   299  .  .  .  .  .  .  .  .  Value: "4"
   300  .  .  .  .  .  .  .  }
   301  .  .  .  .  .  .  }
   302  .  .  .  .  .  .  Body: *ast.BlockStmt {
   303  .  .  .  .  .  .  .  Lbrace: 21:26
   304  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   305  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   306  .  .  .  .  .  .  .  .  .  X: *ast.CallExpr {
   307  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
   308  .  .  .  .  .  .  .  .  .  .  .  NamePos: 22:12
   309  .  .  .  .  .  .  .  .  .  .  .  Name: "println"
   310  .  .  .  .  .  .  .  .  .  .  }
   311  .  .  .  .  .  .  .  .  .  .  Lparen: 22:19
   312  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   313  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   314  .  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 22:20
   315  .  .  .  .  .  .  .  .  .  .  .  .  Kind: STRING
   316  .  .  .  .  .  .  .  .  .  .  .  .  Value: "\"also will not happen\""
   317  .  .  .  .  .  .  .  .  .  .  .  }
   318  .  .  .  .  .  .  .  .  .  .  }
   319  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
   320  .  .  .  .  .  .  .  .  .  .  Rparen: 22:42
   321  .  .  .  .  .  .  .  .  .  }
   322  .  .  .  .  .  .  .  .  }
   323  .  .  .  .  .  .  .  }
   324  .  .  .  .  .  .  .  Rbrace: 23:7
   325  .  .  .  .  .  .  }
   326  .  .  .  .  .  }
   327  .  .  .  .  .  9: *ast.BadStmt {
   328  .  .  .  .  .  .  From: 24:7
   329  .  .  .  .  .  .  To: 27:2
   330  .  .  .  .  .  }
   331  .  .  .  .  }
   332  .  .  .  .  Rbrace: 27:2
   333  .  .  .  }
   334  .  .  }
   335  .  }
   336  .  Scope: *ast.Scope {
   337  .  .  Objects: map[string]*ast.Object (len = 1) {
   338  .  .  .  "main": *(obj @ 11)
   339  .  .  }
   340  .  }
   341  .  Unresolved: []*ast.Ident (len = 9) {
   342  .  .  0: *(obj @ 29)
   343  .  .  1: *(obj @ 75)
   344  .  .  2: *(obj @ 99)
   345  .  .  3: *(obj @ 121)
   346  .  .  4: *(obj @ 167)
   347  .  .  5: *(obj @ 189)
   348  .  .  6: *(obj @ 207)
   349  .  .  7: *(obj @ 253)
   350  .  .  8: *(obj @ 307)
   351  .  }
   352  }