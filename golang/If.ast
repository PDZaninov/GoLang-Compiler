     0  *ast.File {
     1  .  Package: 1:1
     2  .  Name: *ast.Ident {
     3  .  .  NamePos: 1:9
     4  .  .  Name: "main"
     5  .  }
     6  .  Decls: []ast.Decl (len = 1) {
     7  .  .  0: *ast.FuncDecl {
     8  .  .  .  Name: *ast.Ident {
     9  .  .  .  .  NamePos: 3:6
    10  .  .  .  .  Name: "main"
    11  .  .  .  .  Obj: *ast.Object {
    12  .  .  .  .  .  Kind: func
    13  .  .  .  .  .  Name: "main"
    14  .  .  .  .  .  Decl: *(obj @ 7)
    15  .  .  .  .  }
    16  .  .  .  }
    17  .  .  .  Type: *ast.FuncType {
    18  .  .  .  .  Func: 3:1
    19  .  .  .  .  Params: *ast.FieldList {
    20  .  .  .  .  .  Opening: 3:10
    21  .  .  .  .  .  Closing: 3:11
    22  .  .  .  .  }
    23  .  .  .  }
    24  .  .  .  Body: *ast.BlockStmt {
    25  .  .  .  .  Lbrace: 3:13
    26  .  .  .  .  List: []ast.Stmt (len = 2) {
    27  .  .  .  .  .  0: *ast.IfStmt {
    28  .  .  .  .  .  .  If: 4:2
    29  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
    30  .  .  .  .  .  .  .  X: *ast.BinaryExpr {
    31  .  .  .  .  .  .  .  .  X: *ast.BasicLit {
    32  .  .  .  .  .  .  .  .  .  ValuePos: 4:5
    33  .  .  .  .  .  .  .  .  .  Kind: INT
    34  .  .  .  .  .  .  .  .  .  Value: "7"
    35  .  .  .  .  .  .  .  .  }
    36  .  .  .  .  .  .  .  .  OpPos: 4:6
    37  .  .  .  .  .  .  .  .  Op: %
    38  .  .  .  .  .  .  .  .  Y: *ast.BasicLit {
    39  .  .  .  .  .  .  .  .  .  ValuePos: 4:7
    40  .  .  .  .  .  .  .  .  .  Kind: INT
    41  .  .  .  .  .  .  .  .  .  Value: "2"
    42  .  .  .  .  .  .  .  .  }
    43  .  .  .  .  .  .  .  }
    44  .  .  .  .  .  .  .  OpPos: 4:9
    45  .  .  .  .  .  .  .  Op: ==
    46  .  .  .  .  .  .  .  Y: *ast.BasicLit {
    47  .  .  .  .  .  .  .  .  ValuePos: 4:12
    48  .  .  .  .  .  .  .  .  Kind: INT
    49  .  .  .  .  .  .  .  .  Value: "0"
    50  .  .  .  .  .  .  .  }
    51  .  .  .  .  .  .  }
    52  .  .  .  .  .  .  Body: *ast.BlockStmt {
    53  .  .  .  .  .  .  .  Lbrace: 4:14
    54  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
    55  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
    56  .  .  .  .  .  .  .  .  .  X: *ast.CallExpr {
    57  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
    58  .  .  .  .  .  .  .  .  .  .  .  NamePos: 5:13
    59  .  .  .  .  .  .  .  .  .  .  .  Name: "println"
    60  .  .  .  .  .  .  .  .  .  .  }
    61  .  .  .  .  .  .  .  .  .  .  Lparen: 5:20
    62  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
    63  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
    64  .  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 5:21
    65  .  .  .  .  .  .  .  .  .  .  .  .  Kind: STRING
    66  .  .  .  .  .  .  .  .  .  .  .  .  Value: "\"7 is even\""
    67  .  .  .  .  .  .  .  .  .  .  .  }
    68  .  .  .  .  .  .  .  .  .  .  }
    69  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
    70  .  .  .  .  .  .  .  .  .  .  Rparen: 5:32
    71  .  .  .  .  .  .  .  .  .  }
    72  .  .  .  .  .  .  .  .  }
    73  .  .  .  .  .  .  .  }
    74  .  .  .  .  .  .  .  Rbrace: 6:5
    75  .  .  .  .  .  .  }
    76  .  .  .  .  .  .  Else: *ast.BlockStmt {
    77  .  .  .  .  .  .  .  Lbrace: 6:12
    78  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
    79  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
    80  .  .  .  .  .  .  .  .  .  X: *ast.CallExpr {
    81  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
    82  .  .  .  .  .  .  .  .  .  .  .  NamePos: 7:12
    83  .  .  .  .  .  .  .  .  .  .  .  Name: "println"
    84  .  .  .  .  .  .  .  .  .  .  }
    85  .  .  .  .  .  .  .  .  .  .  Lparen: 7:19
    86  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
    87  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
    88  .  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 7:20
    89  .  .  .  .  .  .  .  .  .  .  .  .  Kind: STRING
    90  .  .  .  .  .  .  .  .  .  .  .  .  Value: "\"7 is odd\""
    91  .  .  .  .  .  .  .  .  .  .  .  }
    92  .  .  .  .  .  .  .  .  .  .  }
    93  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
    94  .  .  .  .  .  .  .  .  .  .  Rparen: 7:30
    95  .  .  .  .  .  .  .  .  .  }
    96  .  .  .  .  .  .  .  .  }
    97  .  .  .  .  .  .  .  }
    98  .  .  .  .  .  .  .  Rbrace: 8:5
    99  .  .  .  .  .  .  }
   100  .  .  .  .  .  }
   101  .  .  .  .  .  1: *ast.IfStmt {
   102  .  .  .  .  .  .  If: 10:5
   103  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   104  .  .  .  .  .  .  .  X: *ast.BasicLit {
   105  .  .  .  .  .  .  .  .  ValuePos: 10:8
   106  .  .  .  .  .  .  .  .  Kind: INT
   107  .  .  .  .  .  .  .  .  Value: "3"
   108  .  .  .  .  .  .  .  }
   109  .  .  .  .  .  .  .  OpPos: 10:10
   110  .  .  .  .  .  .  .  Op: <
   111  .  .  .  .  .  .  .  Y: *ast.BasicLit {
   112  .  .  .  .  .  .  .  .  ValuePos: 10:12
   113  .  .  .  .  .  .  .  .  Kind: INT
   114  .  .  .  .  .  .  .  .  Value: "2"
   115  .  .  .  .  .  .  .  }
   116  .  .  .  .  .  .  }
   117  .  .  .  .  .  .  Body: *ast.BlockStmt {
   118  .  .  .  .  .  .  .  Lbrace: 10:14
   119  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   120  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   121  .  .  .  .  .  .  .  .  .  X: *ast.CallExpr {
   122  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
   123  .  .  .  .  .  .  .  .  .  .  .  NamePos: 11:12
   124  .  .  .  .  .  .  .  .  .  .  .  Name: "println"
   125  .  .  .  .  .  .  .  .  .  .  }
   126  .  .  .  .  .  .  .  .  .  .  Lparen: 11:19
   127  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
   128  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   129  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: 11:20
   130  .  .  .  .  .  .  .  .  .  .  .  .  Name: "num"
   131  .  .  .  .  .  .  .  .  .  .  .  }
   132  .  .  .  .  .  .  .  .  .  .  .  1: *ast.BasicLit {
   133  .  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 11:25
   134  .  .  .  .  .  .  .  .  .  .  .  .  Kind: STRING
   135  .  .  .  .  .  .  .  .  .  .  .  .  Value: "\"is negative\""
   136  .  .  .  .  .  .  .  .  .  .  .  }
   137  .  .  .  .  .  .  .  .  .  .  }
   138  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
   139  .  .  .  .  .  .  .  .  .  .  Rparen: 11:38
   140  .  .  .  .  .  .  .  .  .  }
   141  .  .  .  .  .  .  .  .  }
   142  .  .  .  .  .  .  .  }
   143  .  .  .  .  .  .  .  Rbrace: 12:5
   144  .  .  .  .  .  .  }
   145  .  .  .  .  .  .  Else: *ast.IfStmt {
   146  .  .  .  .  .  .  .  If: 12:12
   147  .  .  .  .  .  .  .  Cond: *ast.BinaryExpr {
   148  .  .  .  .  .  .  .  .  X: *ast.BasicLit {
   149  .  .  .  .  .  .  .  .  .  ValuePos: 12:15
   150  .  .  .  .  .  .  .  .  .  Kind: INT
   151  .  .  .  .  .  .  .  .  .  Value: "20"
   152  .  .  .  .  .  .  .  .  }
   153  .  .  .  .  .  .  .  .  OpPos: 12:18
   154  .  .  .  .  .  .  .  .  Op: <
   155  .  .  .  .  .  .  .  .  Y: *ast.BasicLit {
   156  .  .  .  .  .  .  .  .  .  ValuePos: 12:20
   157  .  .  .  .  .  .  .  .  .  Kind: INT
   158  .  .  .  .  .  .  .  .  .  Value: "10"
   159  .  .  .  .  .  .  .  .  }
   160  .  .  .  .  .  .  .  }
   161  .  .  .  .  .  .  .  Body: *ast.BlockStmt {
   162  .  .  .  .  .  .  .  .  Lbrace: 12:23
   163  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   164  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   165  .  .  .  .  .  .  .  .  .  .  X: *ast.CallExpr {
   166  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
   167  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: 13:13
   168  .  .  .  .  .  .  .  .  .  .  .  .  Name: "println"
   169  .  .  .  .  .  .  .  .  .  .  .  }
   170  .  .  .  .  .  .  .  .  .  .  .  Lparen: 13:20
   171  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 2) {
   172  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.Ident {
   173  .  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: 13:21
   174  .  .  .  .  .  .  .  .  .  .  .  .  .  Name: "num"
   175  .  .  .  .  .  .  .  .  .  .  .  .  }
   176  .  .  .  .  .  .  .  .  .  .  .  .  1: *ast.BasicLit {
   177  .  .  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 13:26
   178  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: STRING
   179  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "\"has 1 digit\""
   180  .  .  .  .  .  .  .  .  .  .  .  .  }
   181  .  .  .  .  .  .  .  .  .  .  .  }
   182  .  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
   183  .  .  .  .  .  .  .  .  .  .  .  Rparen: 13:39
   184  .  .  .  .  .  .  .  .  .  .  }
   185  .  .  .  .  .  .  .  .  .  }
   186  .  .  .  .  .  .  .  .  }
   187  .  .  .  .  .  .  .  .  Rbrace: 14:5
   188  .  .  .  .  .  .  .  }
   189  .  .  .  .  .  .  .  Else: *ast.BlockStmt {
   190  .  .  .  .  .  .  .  .  Lbrace: 14:12
   191  .  .  .  .  .  .  .  .  List: []ast.Stmt (len = 1) {
   192  .  .  .  .  .  .  .  .  .  0: *ast.ExprStmt {
   193  .  .  .  .  .  .  .  .  .  .  X: *ast.CallExpr {
   194  .  .  .  .  .  .  .  .  .  .  .  Fun: *ast.Ident {
   195  .  .  .  .  .  .  .  .  .  .  .  .  NamePos: 15:13
   196  .  .  .  .  .  .  .  .  .  .  .  .  Name: "println"
   197  .  .  .  .  .  .  .  .  .  .  .  }
   198  .  .  .  .  .  .  .  .  .  .  .  Lparen: 15:20
   199  .  .  .  .  .  .  .  .  .  .  .  Args: []ast.Expr (len = 1) {
   200  .  .  .  .  .  .  .  .  .  .  .  .  0: *ast.BasicLit {
   201  .  .  .  .  .  .  .  .  .  .  .  .  .  ValuePos: 15:21
   202  .  .  .  .  .  .  .  .  .  .  .  .  .  Kind: STRING
   203  .  .  .  .  .  .  .  .  .  .  .  .  .  Value: "\"has multiple digits\""
   204  .  .  .  .  .  .  .  .  .  .  .  .  }
   205  .  .  .  .  .  .  .  .  .  .  .  }
   206  .  .  .  .  .  .  .  .  .  .  .  Ellipsis: -
   207  .  .  .  .  .  .  .  .  .  .  .  Rparen: 15:42
   208  .  .  .  .  .  .  .  .  .  .  }
   209  .  .  .  .  .  .  .  .  .  }
   210  .  .  .  .  .  .  .  .  }
   211  .  .  .  .  .  .  .  .  Rbrace: 16:5
   212  .  .  .  .  .  .  .  }
   213  .  .  .  .  .  .  }
   214  .  .  .  .  .  }
   215  .  .  .  .  }
   216  .  .  .  .  Rbrace: 17:1
   217  .  .  .  }
   218  .  .  }
   219  .  }
   220  .  Scope: *ast.Scope {
   221  .  .  Objects: map[string]*ast.Object (len = 1) {
   222  .  .  .  "main": *(obj @ 11)
   223  .  .  }
   224  .  }
   225  .  Unresolved: []*ast.Ident (len = 7) {
   226  .  .  0: *(obj @ 57)
   227  .  .  1: *(obj @ 81)
   228  .  .  2: *(obj @ 122)
   229  .  .  3: *(obj @ 128)
   230  .  .  4: *(obj @ 166)
   231  .  .  5: *(obj @ 172)
   232  .  .  6: *(obj @ 194)
   233  .  }
   234  }